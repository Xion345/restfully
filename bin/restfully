#!/usr/bin/env ruby
# The command line Restfully client

require 'restfully'
require 'optparse'
require 'logger'
require 'pp'
require 'ripl'
require 'ripl/multi_line'

# Behaviour of pp in IRB is different on ruby1.9:
# * pp(object) returns object#inspect.
# * we prefer the behaviour of ruby1.8 where pp returns nil.
alias :old_pp :pp 
def pp(*args)
  old_pp(*args); nil
end

logger = Logger.new(STDERR)
logger.level = Logger::WARN
OPTIONS = {"logger" => logger}

Ripl.config[:play_quiet] = false

option_parser = OptionParser.new do |opts|
  opts.banner = <<BANNER
* Description
  Restfully #{Restfully::VERSION} - Access REST APIs effortlessly
* Usage
  restfully [options] [FILE]

  If FILE is given and is an HTTP URI or a local file, the content of that file will be executed in the context of the Restfully session. Pass - to read from STDIN.
  If no FILE is given, then an interactive shell will be launched in the context of the Restfully session.
BANNER

  opts.separator ""
  opts.separator "* Common options"
  opts.on("--uri=", "Sets the base URI") do |v|
    OPTIONS["uri"] = v
  end
  opts.on("-u=", "--username=", "Sets the username") do |u|
    OPTIONS["username"] = u
  end
  opts.on("-p=", "--password=", "Sets the user password") do |p|
    OPTIONS["password"] = p
  end
  opts.on("-c=", "--config=", "Sets the various options based on a custom YAML configuration file") do |v|
    OPTIONS["configuration_file"] = v
  end
  opts.on("-r=", "--require=", "Require an additional media-type") do |v|
    OPTIONS["require"] ||= []
    OPTIONS["require"].push(v)
  end
  opts.on("--log=", "Outputs log messages to the given file. Defaults to stdout") do |v|
    original_logger_level = logger.level
    logger = Logger.new(File.expand_path(v))
    logger.level = original_logger_level
    OPTIONS["logger"] = logger
  end
  opts.on("--no-cache", "Disable client-side caching") do |v|
    OPTIONS["cache"] = false
  end
  opts.on("--color", "Color output") do |v|
    require 'ripl/color_streams'
  end
  opts.on("-q", "--quiet", "Run quietly") do |v|
    Ripl.config[:play_quiet] = true
    OPTIONS["logger"].level = Logger::WARN
  end
  opts.on("-v", "--verbose", "Run verbosely") do |v|
    OPTIONS["logger"].level = Logger::INFO
  end
  opts.on("--debug", "Run in debug mode") do |v|
    OPTIONS["logger"].level = Logger::DEBUG
  end
  
  opts.separator ""
  opts.separator "* Options specific to FILE"
  opts.on("--shell", "Start an interactive session even after FILE content has been executed") do |v|
    OPTIONS["shell"] = true
  end
  opts.on("-i", "--install", "Install any gem that might be required in FILE") do |v|
    Ripl.config[:play_install] = true
  end
  
  opts.separator ""
  opts.separator "* Other"
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
  opts.on_tail("--version", "Show version") do
    puts Restfully::VERSION
    exit
  end
end.parse!

if ARGV[0]
  require 'ripl/play'
  Ripl.config[:play] = ARGV[0].dup
end

@session = Restfully::Session.new(OPTIONS)

module Restfully
  class Session
    alias :old_initialize :initialize
    # Overwrite Restfully::Session.new calls that might occur in replayed
    # scripts, so that they preferably take the configuration given with the
    # restfully command-line tool.
    def initialize(options = {}, &block)
      @config = options.symbolize_keys
      opts2 = load_configuration_file(OPTIONS.symbolize_keys)
      opts3 = merge_configurations(@config, opts2)
      p [:final, opts3[:logger]]
      old_initialize(opts3, &block)
    end
  end
end

module Ripl::Play
  def get_input
    puts(prompt + @play_input) unless Ripl.config[:play_quiet]
    @play_input
  end
end

ARGV.clear
p Ripl.config[:play_quiet]
Ripl.start :binding => @session.instance_eval{ binding }#, :readline => "ruby"
# 
# if execute = OPTIONS.delete("execute")
#   module Restfully
#     class Session
#       alias :old_initialize :initialize
#       # Overwrite Restfully::Session.new calls that might occur in scripts
#       # execute with --execute option, so that they preferably take the
#       # configuration given with the restfully command-line tool.
#       def initialize(options = {}, &block)
#         opts1 = options.symbolize_keys
#         opts2 = load_configuration_file(OPTIONS.symbolize_keys)
#         opts3 = merge_configurations(opts1, opts2)
#         old_initialize(opts3, &block)
#       end
#     end
#   end
#   @session.instance_eval(execute)
#   if OPTIONS["shell"]
#     ARGV.clear
#     Ripl.start :binding => @session.instance_eval{ binding }
#   end
# else
#   def session; @session; end
#   def root; @root ||= session.root; end
# 
#   require 'ripl'
#   
#   puts "Restfully/#{Restfully::VERSION} - The root resource is available in the 'root' variable."
#   
#   
#   ARGV.clear  
#   Ripl.start :binding => @session.instance_eval{ binding }
# end