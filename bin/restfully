#!/usr/bin/env ruby
# The command line Restfully client

require 'restfully'
require 'optparse'
require 'logger'
require 'pp'

# Behaviour of pp in IRB is different on ruby1.9:
# * pp(object) returns object#inspect.
# * we prefer the behaviour of ruby1.8 where pp returns nil.
alias :old_pp :pp 
def pp(*args)
  old_pp(*args); nil
end

logger = Logger.new(STDERR)
logger.level = Logger::WARN
OPTIONS = {"logger" => logger}

option_parser = OptionParser.new do |opts|
  opts.banner = <<BANNER
* Description
  Restfully #{Restfully::VERSION} - Access REST APIs effortlessly
* Usage
  restfully [uri] [options]
* Options
BANNER

  opts.on("-u=", "--username=", "Sets the username") do |u|
    OPTIONS["username"] = u
  end
  opts.on("-p=", "--password=", "Sets the user password") do |p|
    OPTIONS["password"] = p
  end
  opts.on("-c=", "--config=", "Sets the various options based on a custom YAML configuration file") do |v|
    OPTIONS["configuration_file"] = v
  end
  opts.on("-e=", "--execute=", "Execute the given commands in the context of the Restfully session. Pass - to read from STDIN.") do |v|
    OPTIONS["execute"] = if v == "-"
      STDIN.read
    else
      v
    end
  end
  opts.on("-r=", "--require=", "Require an additional media-type") do |v|
    OPTIONS["require"] ||= []
    OPTIONS["require"].push(v)
  end
  opts.on("--log=", "Outputs log messages to the given file. Defaults to stdout") do |v|
    original_logger_level = logger.level
    logger = Logger.new(File.expand_path(v))
    logger.level = original_logger_level
    OPTIONS["logger"] = logger
  end
  opts.on("--no-cache", "Disable client-side caching") do |v|
    OPTIONS["cache"] = false
  end
  opts.on("-v", "--verbose", "Run verbosely") do |v|
    OPTIONS["logger"].level = Logger::INFO
  end
  opts.on("--debug", "Run in debug mode") do |v|
    OPTIONS["logger"].level = Logger::DEBUG
  end
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
  
end

option_parser.parse!

if given_uri = ARGV.shift
  OPTIONS["uri"] = given_uri
end

@session = Restfully::Session.new(OPTIONS)

if OPTIONS["execute"]
  module Restfully
    class Session
      alias :old_initialize :initialize
      # Overwrite Restfully::Session.new calls that might occur in scripts
      # execute with --execute option, so that they preferably take the
      # configuration given with the restfully command-line tool.
      def initialize(options = {}, &block)
        options = options.symbolize_keys.merge(OPTIONS.symbolize_keys)
        old_initialize(options, &block)
      end
    end
  end
  @session.instance_eval(OPTIONS["execute"])
else
  def session; @session; end
  def root; @root ||= session.root; end

  puts "Restfully/#{Restfully::VERSION} - The root resource is available in the 'root' variable."

  require 'irb'
  require 'irb/completion'
  require 'irb/ext/save-history'

  HOME = ENV['HOME'] || ENV['HOMEPATH']
  # Keep history of your last commands.
  # Taken from <http://blog.nicksieger.com/articles/2006/04/23/tweaking-irb>
  IRB.conf[:SAVE_HISTORY] = 100
  IRB.conf[:HISTORY_FILE] = "#{HOME}/.irb-save-history"

  # Raises an error on Windows, so disabling it.
  if RUBY_PLATFORM !~ /(win|w)32$/
    module Readline
      module History
        LOG = "#{HOME}/.irb-history"

        def self.write_log(line)
          File.open(LOG, 'ab') {|f| 
            f << "#{line}\n"
          }
        end
    
        def self.start_session_log
          write_log("\n")
        end
      end

      alias :old_readline :readline
      def readline(*args)
        ln = old_readline(*args)
        begin
          History.write_log(ln)
        rescue
        end
        ln
      end
    end
    Readline::History.start_session_log
  end

  ARGV.clear
  ARGV.concat [ "--readline", "--prompt-mode", "simple" ]
  IRB.start
  exit!
end